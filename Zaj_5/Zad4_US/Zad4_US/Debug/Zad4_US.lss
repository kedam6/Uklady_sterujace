
Zad4_US.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000828  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000828  000008bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000056  0080007c  0080007c  000008d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003f8  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000213  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001de  00000000  00000000  00000f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001164  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f5  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ce  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3d       	cpi	r26, 0xD2	; 210
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <main>
  8a:	0c 94 12 04 	jmp	0x824	; 0x824 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <execute>:
static int sei_on = 1; //0 - off, 1 - on; initially its on


//function executing tasks while looking through task table
void execute(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <execute+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <execute+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	//first assign all of remaining tasks, so we can actually pass through them
	int i;
	for(i = 0 ; i < MAX_NUMBER_OF_TASKS; i++)
  9e:	1a 82       	std	Y+2, r1	; 0x02
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	6c c0       	rjmp	.+216    	; 0x17c <execute+0xea>
	{
		if(tasks[i].task == 0)
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	9a 81       	ldd	r25, Y+2	; 0x02
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	9c 01       	movw	r18, r24
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	82 0f       	add	r24, r18
  b8:	93 1f       	adc	r25, r19
  ba:	8e 57       	subi	r24, 0x7E	; 126
  bc:	9f 4f       	sbci	r25, 0xFF	; 255
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	91 81       	ldd	r25, Z+1	; 0x01
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	09 f0       	breq	.+2      	; 0xca <execute+0x38>
  c8:	54 c0       	rjmp	.+168    	; 0x172 <execute+0xe0>
		{
			tasks[i].param = 0;
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	9a 81       	ldd	r25, Y+2	; 0x02
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	9c 01       	movw	r18, r24
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	82 0f       	add	r24, r18
  de:	93 1f       	adc	r25, r19
  e0:	88 57       	subi	r24, 0x78	; 120
  e2:	9f 4f       	sbci	r25, 0xFF	; 255
  e4:	fc 01       	movw	r30, r24
  e6:	11 82       	std	Z+1, r1	; 0x01
  e8:	10 82       	st	Z, r1
			tasks[i].period = -1; //in case there is no task or task is non-periodic
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	9a 81       	ldd	r25, Y+2	; 0x02
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	9c 01       	movw	r18, r24
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	82 0f       	add	r24, r18
  fe:	93 1f       	adc	r25, r19
 100:	8c 57       	subi	r24, 0x7C	; 124
 102:	9f 4f       	sbci	r25, 0xFF	; 255
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	3f ef       	ldi	r19, 0xFF	; 255
 108:	fc 01       	movw	r30, r24
 10a:	31 83       	std	Z+1, r19	; 0x01
 10c:	20 83       	st	Z, r18
			tasks[i].ready = 0; // 0 - not ready 1+ - ready
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	9a 81       	ldd	r25, Y+2	; 0x02
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	9c 01       	movw	r18, r24
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	82 0f       	add	r24, r18
 122:	93 1f       	adc	r25, r19
 124:	8a 57       	subi	r24, 0x7A	; 122
 126:	9f 4f       	sbci	r25, 0xFF	; 255
 128:	fc 01       	movw	r30, r24
 12a:	11 82       	std	Z+1, r1	; 0x01
 12c:	10 82       	st	Z, r1
			tasks[i].task = 0;
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	9a 81       	ldd	r25, Y+2	; 0x02
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	9c 01       	movw	r18, r24
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	82 0f       	add	r24, r18
 142:	93 1f       	adc	r25, r19
 144:	8e 57       	subi	r24, 0x7E	; 126
 146:	9f 4f       	sbci	r25, 0xFF	; 255
 148:	fc 01       	movw	r30, r24
 14a:	11 82       	std	Z+1, r1	; 0x01
 14c:	10 82       	st	Z, r1
			tasks[i].togo = -1;
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	9a 81       	ldd	r25, Y+2	; 0x02
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	9c 01       	movw	r18, r24
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	22 0f       	add	r18, r18
 15e:	33 1f       	adc	r19, r19
 160:	82 0f       	add	r24, r18
 162:	93 1f       	adc	r25, r19
 164:	86 57       	subi	r24, 0x76	; 118
 166:	9f 4f       	sbci	r25, 0xFF	; 255
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	3f ef       	ldi	r19, 0xFF	; 255
 16c:	fc 01       	movw	r30, r24
 16e:	31 83       	std	Z+1, r19	; 0x01
 170:	20 83       	st	Z, r18
//function executing tasks while looking through task table
void execute(void)
{
	//first assign all of remaining tasks, so we can actually pass through them
	int i;
	for(i = 0 ; i < MAX_NUMBER_OF_TASKS; i++)
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	9a 81       	ldd	r25, Y+2	; 0x02
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	9a 83       	std	Y+2, r25	; 0x02
 17a:	89 83       	std	Y+1, r24	; 0x01
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	9a 81       	ldd	r25, Y+2	; 0x02
 180:	88 30       	cpi	r24, 0x08	; 8
 182:	91 05       	cpc	r25, r1
 184:	0c f4       	brge	.+2      	; 0x188 <execute+0xf6>
 186:	8e cf       	rjmp	.-228    	; 0xa4 <execute+0x12>
			tasks[i].ready = 0; // 0 - not ready 1+ - ready
			tasks[i].task = 0;
			tasks[i].togo = -1;
		}
	}
	int table_counter = 0;
 188:	1c 82       	std	Y+4, r1	; 0x04
 18a:	1b 82       	std	Y+3, r1	; 0x03
	//loop checking tasks
	while(1)
	{
		//if task is ready, stop handling interruption, then handle the task
		if(tasks[table_counter].ready > 0)
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	9c 81       	ldd	r25, Y+4	; 0x04
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	9c 01       	movw	r18, r24
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	82 0f       	add	r24, r18
 1a0:	93 1f       	adc	r25, r19
 1a2:	8a 57       	subi	r24, 0x7A	; 122
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	fc 01       	movw	r30, r24
 1a8:	80 81       	ld	r24, Z
 1aa:	91 81       	ldd	r25, Z+1	; 0x01
 1ac:	18 16       	cp	r1, r24
 1ae:	19 06       	cpc	r1, r25
 1b0:	0c f0       	brlt	.+2      	; 0x1b4 <execute+0x122>
 1b2:	56 c0       	rjmp	.+172    	; 0x260 <execute+0x1ce>
		{
			if(sei_on)
 1b4:	80 91 60 00 	lds	r24, 0x0060
 1b8:	90 91 61 00 	lds	r25, 0x0061
 1bc:	00 97       	sbiw	r24, 0x00	; 0
 1be:	29 f0       	breq	.+10     	; 0x1ca <execute+0x138>
			{
				cli();
 1c0:	f8 94       	cli
				sei_on = 0;
 1c2:	10 92 61 00 	sts	0x0061, r1
 1c6:	10 92 60 00 	sts	0x0060, r1
			}
			//all tasks are being processed after interruption handling is turned off
			tasks[table_counter].ready--;
 1ca:	8b 81       	ldd	r24, Y+3	; 0x03
 1cc:	9c 81       	ldd	r25, Y+4	; 0x04
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	9c 01       	movw	r18, r24
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	82 0f       	add	r24, r18
 1de:	93 1f       	adc	r25, r19
 1e0:	8a 57       	subi	r24, 0x7A	; 122
 1e2:	9f 4f       	sbci	r25, 0xFF	; 255
 1e4:	fc 01       	movw	r30, r24
 1e6:	80 81       	ld	r24, Z
 1e8:	91 81       	ldd	r25, Z+1	; 0x01
 1ea:	9c 01       	movw	r18, r24
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	31 09       	sbc	r19, r1
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	9c 81       	ldd	r25, Y+4	; 0x04
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	ac 01       	movw	r20, r24
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	84 0f       	add	r24, r20
 204:	95 1f       	adc	r25, r21
 206:	8a 57       	subi	r24, 0x7A	; 122
 208:	9f 4f       	sbci	r25, 0xFF	; 255
 20a:	fc 01       	movw	r30, r24
 20c:	31 83       	std	Z+1, r19	; 0x01
 20e:	20 83       	st	Z, r18
			tasks[table_counter].task(tasks[table_counter].param);
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	9c 81       	ldd	r25, Y+4	; 0x04
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	9c 01       	movw	r18, r24
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	82 0f       	add	r24, r18
 224:	93 1f       	adc	r25, r19
 226:	8e 57       	subi	r24, 0x7E	; 126
 228:	9f 4f       	sbci	r25, 0xFF	; 255
 22a:	fc 01       	movw	r30, r24
 22c:	20 81       	ld	r18, Z
 22e:	31 81       	ldd	r19, Z+1	; 0x01
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	9c 81       	ldd	r25, Y+4	; 0x04
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	ac 01       	movw	r20, r24
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	84 0f       	add	r24, r20
 244:	95 1f       	adc	r25, r21
 246:	88 57       	subi	r24, 0x78	; 120
 248:	9f 4f       	sbci	r25, 0xFF	; 255
 24a:	fc 01       	movw	r30, r24
 24c:	80 81       	ld	r24, Z
 24e:	91 81       	ldd	r25, Z+1	; 0x01
 250:	f9 01       	movw	r30, r18
 252:	09 95       	icall
			table_counter++;
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	9c 81       	ldd	r25, Y+4	; 0x04
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	9c 83       	std	Y+4, r25	; 0x04
 25c:	8b 83       	std	Y+3, r24	; 0x03
 25e:	1c c0       	rjmp	.+56     	; 0x298 <execute+0x206>
		}
		//this task wasn't ready
		else
		{
			//move forward
			if(table_counter + 1 < MAX_NUMBER_OF_TASKS)
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	9c 81       	ldd	r25, Y+4	; 0x04
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	88 30       	cpi	r24, 0x08	; 8
 268:	91 05       	cpc	r25, r1
 26a:	34 f4       	brge	.+12     	; 0x278 <execute+0x1e6>
			table_counter++;
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	9c 81       	ldd	r25, Y+4	; 0x04
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	9c 83       	std	Y+4, r25	; 0x04
 274:	8b 83       	std	Y+3, r24	; 0x03
 276:	10 c0       	rjmp	.+32     	; 0x298 <execute+0x206>
			//return to beginning of table, turn on interruption if needed
			else
			{
				if(sei_on == 0)
 278:	80 91 60 00 	lds	r24, 0x0060
 27c:	90 91 61 00 	lds	r25, 0x0061
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	39 f4       	brne	.+14     	; 0x292 <execute+0x200>
				{
					sei_on = 1;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	90 93 61 00 	sts	0x0061, r25
 28c:	80 93 60 00 	sts	0x0060, r24
					sei();
 290:	78 94       	sei
				}
				table_counter = 0;
 292:	1c 82       	std	Y+4, r1	; 0x04
 294:	1b 82       	std	Y+3, r1	; 0x03
			}
		}
	}
 296:	7a cf       	rjmp	.-268    	; 0x18c <execute+0xfa>
 298:	79 cf       	rjmp	.-270    	; 0x18c <execute+0xfa>

0000029a <schedule>:
}
//schedule tasks, mark them as ready if needed
void schedule(void)
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <schedule+0x6>
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
	int i;
	for(i = 0; i < MAX_NUMBER_OF_TASKS; i++)
 2a4:	1a 82       	std	Y+2, r1	; 0x02
 2a6:	19 82       	std	Y+1, r1	; 0x01
 2a8:	70 c0       	rjmp	.+224    	; 0x38a <schedule+0xf0>
	{
		//task ready
		if(tasks[i].togo == 0)
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	9a 81       	ldd	r25, Y+2	; 0x02
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	9c 01       	movw	r18, r24
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	22 0f       	add	r18, r18
 2ba:	33 1f       	adc	r19, r19
 2bc:	82 0f       	add	r24, r18
 2be:	93 1f       	adc	r25, r19
 2c0:	86 57       	subi	r24, 0x76	; 118
 2c2:	9f 4f       	sbci	r25, 0xFF	; 255
 2c4:	fc 01       	movw	r30, r24
 2c6:	80 81       	ld	r24, Z
 2c8:	91 81       	ldd	r25, Z+1	; 0x01
 2ca:	00 97       	sbiw	r24, 0x00	; 0
 2cc:	b1 f5       	brne	.+108    	; 0x33a <schedule+0xa0>
		{
			tasks[i].ready = 1;
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	9a 81       	ldd	r25, Y+2	; 0x02
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	9c 01       	movw	r18, r24
 2d8:	22 0f       	add	r18, r18
 2da:	33 1f       	adc	r19, r19
 2dc:	22 0f       	add	r18, r18
 2de:	33 1f       	adc	r19, r19
 2e0:	82 0f       	add	r24, r18
 2e2:	93 1f       	adc	r25, r19
 2e4:	8a 57       	subi	r24, 0x7A	; 122
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	fc 01       	movw	r30, r24
 2ee:	31 83       	std	Z+1, r19	; 0x01
 2f0:	20 83       	st	Z, r18
			tasks[i].togo = tasks[i].period - 1;
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	9a 81       	ldd	r25, Y+2	; 0x02
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	9c 01       	movw	r18, r24
 2fc:	22 0f       	add	r18, r18
 2fe:	33 1f       	adc	r19, r19
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	82 0f       	add	r24, r18
 306:	93 1f       	adc	r25, r19
 308:	8c 57       	subi	r24, 0x7C	; 124
 30a:	9f 4f       	sbci	r25, 0xFF	; 255
 30c:	fc 01       	movw	r30, r24
 30e:	80 81       	ld	r24, Z
 310:	91 81       	ldd	r25, Z+1	; 0x01
 312:	9c 01       	movw	r18, r24
 314:	21 50       	subi	r18, 0x01	; 1
 316:	31 09       	sbc	r19, r1
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	9a 81       	ldd	r25, Y+2	; 0x02
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	ac 01       	movw	r20, r24
 322:	44 0f       	add	r20, r20
 324:	55 1f       	adc	r21, r21
 326:	44 0f       	add	r20, r20
 328:	55 1f       	adc	r21, r21
 32a:	84 0f       	add	r24, r20
 32c:	95 1f       	adc	r25, r21
 32e:	86 57       	subi	r24, 0x76	; 118
 330:	9f 4f       	sbci	r25, 0xFF	; 255
 332:	fc 01       	movw	r30, r24
 334:	31 83       	std	Z+1, r19	; 0x01
 336:	20 83       	st	Z, r18
 338:	23 c0       	rjmp	.+70     	; 0x380 <schedule+0xe6>
		}
		//await time decrease
		else
		{
			tasks[i].togo--;
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	9a 81       	ldd	r25, Y+2	; 0x02
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	9c 01       	movw	r18, r24
 344:	22 0f       	add	r18, r18
 346:	33 1f       	adc	r19, r19
 348:	22 0f       	add	r18, r18
 34a:	33 1f       	adc	r19, r19
 34c:	82 0f       	add	r24, r18
 34e:	93 1f       	adc	r25, r19
 350:	86 57       	subi	r24, 0x76	; 118
 352:	9f 4f       	sbci	r25, 0xFF	; 255
 354:	fc 01       	movw	r30, r24
 356:	80 81       	ld	r24, Z
 358:	91 81       	ldd	r25, Z+1	; 0x01
 35a:	9c 01       	movw	r18, r24
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	31 09       	sbc	r19, r1
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	9a 81       	ldd	r25, Y+2	; 0x02
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	ac 01       	movw	r20, r24
 36a:	44 0f       	add	r20, r20
 36c:	55 1f       	adc	r21, r21
 36e:	44 0f       	add	r20, r20
 370:	55 1f       	adc	r21, r21
 372:	84 0f       	add	r24, r20
 374:	95 1f       	adc	r25, r21
 376:	86 57       	subi	r24, 0x76	; 118
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	fc 01       	movw	r30, r24
 37c:	31 83       	std	Z+1, r19	; 0x01
 37e:	20 83       	st	Z, r18
}
//schedule tasks, mark them as ready if needed
void schedule(void)
{
	int i;
	for(i = 0; i < MAX_NUMBER_OF_TASKS; i++)
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	9a 81       	ldd	r25, Y+2	; 0x02
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	9a 83       	std	Y+2, r25	; 0x02
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	9a 81       	ldd	r25, Y+2	; 0x02
 38e:	88 30       	cpi	r24, 0x08	; 8
 390:	91 05       	cpc	r25, r1
 392:	0c f4       	brge	.+2      	; 0x396 <schedule+0xfc>
 394:	8a cf       	rjmp	.-236    	; 0x2aa <schedule+0x10>
		else
		{
			tasks[i].togo--;
		}
	}
}
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <AddTask>:
//adds new task, sets await time to period that tasks needs to wait for task to be ready
void AddTask(int priority, int period, TASK_PTR func_ptr, void * params)
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	28 97       	sbiw	r28, 0x08	; 8
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	9a 83       	std	Y+2, r25	; 0x02
 3b6:	89 83       	std	Y+1, r24	; 0x01
 3b8:	7c 83       	std	Y+4, r23	; 0x04
 3ba:	6b 83       	std	Y+3, r22	; 0x03
 3bc:	5e 83       	std	Y+6, r21	; 0x06
 3be:	4d 83       	std	Y+5, r20	; 0x05
 3c0:	38 87       	std	Y+8, r19	; 0x08
 3c2:	2f 83       	std	Y+7, r18	; 0x07
	tasks[priority-1].period = period;
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	9a 81       	ldd	r25, Y+2	; 0x02
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	9c 01       	movw	r18, r24
 3d0:	22 0f       	add	r18, r18
 3d2:	33 1f       	adc	r19, r19
 3d4:	22 0f       	add	r18, r18
 3d6:	33 1f       	adc	r19, r19
 3d8:	82 0f       	add	r24, r18
 3da:	93 1f       	adc	r25, r19
 3dc:	8c 57       	subi	r24, 0x7C	; 124
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	2b 81       	ldd	r18, Y+3	; 0x03
 3e2:	3c 81       	ldd	r19, Y+4	; 0x04
 3e4:	fc 01       	movw	r30, r24
 3e6:	31 83       	std	Z+1, r19	; 0x01
 3e8:	20 83       	st	Z, r18
	tasks[priority-1].task = func_ptr;
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	9a 81       	ldd	r25, Y+2	; 0x02
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	9c 01       	movw	r18, r24
 3f6:	22 0f       	add	r18, r18
 3f8:	33 1f       	adc	r19, r19
 3fa:	22 0f       	add	r18, r18
 3fc:	33 1f       	adc	r19, r19
 3fe:	82 0f       	add	r24, r18
 400:	93 1f       	adc	r25, r19
 402:	8e 57       	subi	r24, 0x7E	; 126
 404:	9f 4f       	sbci	r25, 0xFF	; 255
 406:	2d 81       	ldd	r18, Y+5	; 0x05
 408:	3e 81       	ldd	r19, Y+6	; 0x06
 40a:	fc 01       	movw	r30, r24
 40c:	31 83       	std	Z+1, r19	; 0x01
 40e:	20 83       	st	Z, r18
	tasks[priority-1].param = params;
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	9a 81       	ldd	r25, Y+2	; 0x02
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	9c 01       	movw	r18, r24
 41c:	22 0f       	add	r18, r18
 41e:	33 1f       	adc	r19, r19
 420:	22 0f       	add	r18, r18
 422:	33 1f       	adc	r19, r19
 424:	82 0f       	add	r24, r18
 426:	93 1f       	adc	r25, r19
 428:	88 57       	subi	r24, 0x78	; 120
 42a:	9f 4f       	sbci	r25, 0xFF	; 255
 42c:	2f 81       	ldd	r18, Y+7	; 0x07
 42e:	38 85       	ldd	r19, Y+8	; 0x08
 430:	fc 01       	movw	r30, r24
 432:	31 83       	std	Z+1, r19	; 0x01
 434:	20 83       	st	Z, r18
	tasks[priority-1].togo = period;
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	9a 81       	ldd	r25, Y+2	; 0x02
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	9c 01       	movw	r18, r24
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	82 0f       	add	r24, r18
 44c:	93 1f       	adc	r25, r19
 44e:	86 57       	subi	r24, 0x76	; 118
 450:	9f 4f       	sbci	r25, 0xFF	; 255
 452:	2b 81       	ldd	r18, Y+3	; 0x03
 454:	3c 81       	ldd	r19, Y+4	; 0x04
 456:	fc 01       	movw	r30, r24
 458:	31 83       	std	Z+1, r19	; 0x01
 45a:	20 83       	st	Z, r18
	tasks[priority-1].ready = 0;
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	9a 81       	ldd	r25, Y+2	; 0x02
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	9c 01       	movw	r18, r24
 468:	22 0f       	add	r18, r18
 46a:	33 1f       	adc	r19, r19
 46c:	22 0f       	add	r18, r18
 46e:	33 1f       	adc	r19, r19
 470:	82 0f       	add	r24, r18
 472:	93 1f       	adc	r25, r19
 474:	8a 57       	subi	r24, 0x7A	; 122
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	fc 01       	movw	r30, r24
 47a:	11 82       	std	Z+1, r1	; 0x01
 47c:	10 82       	st	Z, r1
 47e:	28 96       	adiw	r28, 0x08	; 8
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <k_init>:
static int dot = 0b10000000;


//initialization of interruption
void k_init(void)
{
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= (0 << WGM00) | (1 << WGM01) | (0 << CS02) | (1 << CS01) | (1 <<CS00) | (1 << COM01) | (0 << COM00);
 498:	83 e5       	ldi	r24, 0x53	; 83
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	23 e5       	ldi	r18, 0x53	; 83
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	f9 01       	movw	r30, r18
 4a2:	20 81       	ld	r18, Z
 4a4:	2b 62       	ori	r18, 0x2B	; 43
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
	OCR0 = 250;
 4aa:	8c e5       	ldi	r24, 0x5C	; 92
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	2a ef       	ldi	r18, 0xFA	; 250
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 83       	st	Z, r18
	TIMSK |= (1 << OCIE0);
 4b4:	89 e5       	ldi	r24, 0x59	; 89
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	29 e5       	ldi	r18, 0x59	; 89
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	f9 01       	movw	r30, r18
 4be:	20 81       	ld	r18, Z
 4c0:	22 60       	ori	r18, 0x02	; 2
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 83       	st	Z, r18
	DDRA|=0xFF;
 4c6:	8a e3       	ldi	r24, 0x3A	; 58
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	fc 01       	movw	r30, r24
 4cc:	80 81       	ld	r24, Z
 4ce:	8a e3       	ldi	r24, 0x3A	; 58
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	2f ef       	ldi	r18, 0xFF	; 255
 4d4:	fc 01       	movw	r30, r24
 4d6:	20 83       	st	Z, r18
	DDRD|=0xFF;
 4d8:	81 e3       	ldi	r24, 0x31	; 49
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	fc 01       	movw	r30, r24
 4de:	80 81       	ld	r24, Z
 4e0:	81 e3       	ldi	r24, 0x31	; 49
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	2f ef       	ldi	r18, 0xFF	; 255
 4e6:	fc 01       	movw	r30, r24
 4e8:	20 83       	st	Z, r18
}
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <__vector_10>:

//interruption handling
ISR(TIMER0_COMP_vect)
{
 4f0:	1f 92       	push	r1
 4f2:	0f 92       	push	r0
 4f4:	00 90 5f 00 	lds	r0, 0x005F
 4f8:	0f 92       	push	r0
 4fa:	11 24       	eor	r1, r1
 4fc:	2f 93       	push	r18
 4fe:	3f 93       	push	r19
 500:	4f 93       	push	r20
 502:	5f 93       	push	r21
 504:	6f 93       	push	r22
 506:	7f 93       	push	r23
 508:	8f 93       	push	r24
 50a:	9f 93       	push	r25
 50c:	af 93       	push	r26
 50e:	bf 93       	push	r27
 510:	ef 93       	push	r30
 512:	ff 93       	push	r31
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
	schedule();
 51c:	0e 94 4d 01 	call	0x29a	; 0x29a <schedule>
}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	ff 91       	pop	r31
 526:	ef 91       	pop	r30
 528:	bf 91       	pop	r27
 52a:	af 91       	pop	r26
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	7f 91       	pop	r23
 532:	6f 91       	pop	r22
 534:	5f 91       	pop	r21
 536:	4f 91       	pop	r20
 538:	3f 91       	pop	r19
 53a:	2f 91       	pop	r18
 53c:	0f 90       	pop	r0
 53e:	00 92 5f 00 	sts	0x005F, r0
 542:	0f 90       	pop	r0
 544:	1f 90       	pop	r1
 546:	18 95       	reti

00000548 <screen>:


//screen refresh mechanism, it checks whichs screens turn is it and updates value represented on screen
void screen(void* param)
{
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	00 d0       	rcall	.+0      	; 0x54e <screen+0x6>
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	9a 83       	std	Y+2, r25	; 0x02
 554:	89 83       	std	Y+1, r24	; 0x01
	//make sure we use port D
	DDRD = 0xff;
 556:	81 e3       	ldi	r24, 0x31	; 49
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	2f ef       	ldi	r18, 0xFF	; 255
 55c:	fc 01       	movw	r30, r24
 55e:	20 83       	st	Z, r18
	PORTD = 0xFF;
 560:	82 e3       	ldi	r24, 0x32	; 50
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	2f ef       	ldi	r18, 0xFF	; 255
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18
	
	//every if sends a new digit to show and screen its going to use
	if(active == 0)
 56a:	80 91 7c 00 	lds	r24, 0x007C
 56e:	90 91 7d 00 	lds	r25, 0x007D
 572:	00 97       	sbiw	r24, 0x00	; 0
 574:	a9 f4       	brne	.+42     	; 0x5a0 <screen+0x58>
	{
		PORTA = digit[first];
 576:	8b e3       	ldi	r24, 0x3B	; 59
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	20 91 7e 00 	lds	r18, 0x007E
 57e:	30 91 7f 00 	lds	r19, 0x007F
 582:	22 0f       	add	r18, r18
 584:	33 1f       	adc	r19, r19
 586:	2e 59       	subi	r18, 0x9E	; 158
 588:	3f 4f       	sbci	r19, 0xFF	; 255
 58a:	f9 01       	movw	r30, r18
 58c:	20 81       	ld	r18, Z
 58e:	31 81       	ldd	r19, Z+1	; 0x01
 590:	fc 01       	movw	r30, r24
 592:	20 83       	st	Z, r18
		PORTD = 0b11110111;
 594:	82 e3       	ldi	r24, 0x32	; 50
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	27 ef       	ldi	r18, 0xF7	; 247
 59a:	fc 01       	movw	r30, r24
 59c:	20 83       	st	Z, r18
 59e:	5b c0       	rjmp	.+182    	; 0x656 <screen+0x10e>
	}
	else if(active == 1)
 5a0:	80 91 7c 00 	lds	r24, 0x007C
 5a4:	90 91 7d 00 	lds	r25, 0x007D
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	91 05       	cpc	r25, r1
 5ac:	e9 f4       	brne	.+58     	; 0x5e8 <screen+0xa0>
	{
		PORTA = digit[second] - dot; //display a dot before number 1000, so we get 990,0 ; 990,1 etc
 5ae:	8b e3       	ldi	r24, 0x3B	; 59
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	20 91 80 00 	lds	r18, 0x0080
 5b6:	30 91 81 00 	lds	r19, 0x0081
 5ba:	22 0f       	add	r18, r18
 5bc:	33 1f       	adc	r19, r19
 5be:	2e 59       	subi	r18, 0x9E	; 158
 5c0:	3f 4f       	sbci	r19, 0xFF	; 255
 5c2:	f9 01       	movw	r30, r18
 5c4:	20 81       	ld	r18, Z
 5c6:	31 81       	ldd	r19, Z+1	; 0x01
 5c8:	42 2f       	mov	r20, r18
 5ca:	20 91 7a 00 	lds	r18, 0x007A
 5ce:	30 91 7b 00 	lds	r19, 0x007B
 5d2:	f4 2f       	mov	r31, r20
 5d4:	f2 1b       	sub	r31, r18
 5d6:	2f 2f       	mov	r18, r31
 5d8:	fc 01       	movw	r30, r24
 5da:	20 83       	st	Z, r18
		PORTD = 0b11111011;
 5dc:	82 e3       	ldi	r24, 0x32	; 50
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	2b ef       	ldi	r18, 0xFB	; 251
 5e2:	fc 01       	movw	r30, r24
 5e4:	20 83       	st	Z, r18
 5e6:	37 c0       	rjmp	.+110    	; 0x656 <screen+0x10e>
	}
	else if(active == 2)
 5e8:	80 91 7c 00 	lds	r24, 0x007C
 5ec:	90 91 7d 00 	lds	r25, 0x007D
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	91 05       	cpc	r25, r1
 5f4:	a9 f4       	brne	.+42     	; 0x620 <screen+0xd8>
	{
		PORTA = digit[third];
 5f6:	8b e3       	ldi	r24, 0x3B	; 59
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	20 91 76 00 	lds	r18, 0x0076
 5fe:	30 91 77 00 	lds	r19, 0x0077
 602:	22 0f       	add	r18, r18
 604:	33 1f       	adc	r19, r19
 606:	2e 59       	subi	r18, 0x9E	; 158
 608:	3f 4f       	sbci	r19, 0xFF	; 255
 60a:	f9 01       	movw	r30, r18
 60c:	20 81       	ld	r18, Z
 60e:	31 81       	ldd	r19, Z+1	; 0x01
 610:	fc 01       	movw	r30, r24
 612:	20 83       	st	Z, r18
		PORTD = 0b11111101;
 614:	82 e3       	ldi	r24, 0x32	; 50
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	2d ef       	ldi	r18, 0xFD	; 253
 61a:	fc 01       	movw	r30, r24
 61c:	20 83       	st	Z, r18
 61e:	1b c0       	rjmp	.+54     	; 0x656 <screen+0x10e>
	}
	else if(active == 3)
 620:	80 91 7c 00 	lds	r24, 0x007C
 624:	90 91 7d 00 	lds	r25, 0x007D
 628:	83 30       	cpi	r24, 0x03	; 3
 62a:	91 05       	cpc	r25, r1
 62c:	a1 f4       	brne	.+40     	; 0x656 <screen+0x10e>
	{
		PORTA = digit[fourth];
 62e:	8b e3       	ldi	r24, 0x3B	; 59
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	20 91 78 00 	lds	r18, 0x0078
 636:	30 91 79 00 	lds	r19, 0x0079
 63a:	22 0f       	add	r18, r18
 63c:	33 1f       	adc	r19, r19
 63e:	2e 59       	subi	r18, 0x9E	; 158
 640:	3f 4f       	sbci	r19, 0xFF	; 255
 642:	f9 01       	movw	r30, r18
 644:	20 81       	ld	r18, Z
 646:	31 81       	ldd	r19, Z+1	; 0x01
 648:	fc 01       	movw	r30, r24
 64a:	20 83       	st	Z, r18
		PORTD = 0b11111110;
 64c:	82 e3       	ldi	r24, 0x32	; 50
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	2e ef       	ldi	r18, 0xFE	; 254
 652:	fc 01       	movw	r30, r24
 654:	20 83       	st	Z, r18
	}
	
	//this maes sure we cycle around 4 screens, not more
	active = (active + 1) % 4; 
 656:	80 91 7c 00 	lds	r24, 0x007C
 65a:	90 91 7d 00 	lds	r25, 0x007D
 65e:	01 96       	adiw	r24, 0x01	; 1
 660:	83 70       	andi	r24, 0x03	; 3
 662:	90 78       	andi	r25, 0x80	; 128
 664:	99 23       	and	r25, r25
 666:	24 f4       	brge	.+8      	; 0x670 <screen+0x128>
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	8c 6f       	ori	r24, 0xFC	; 252
 66c:	9f 6f       	ori	r25, 0xFF	; 255
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	90 93 7d 00 	sts	0x007D, r25
 674:	80 93 7c 00 	sts	0x007C, r24
}
 678:	0f 90       	pop	r0
 67a:	0f 90       	pop	r0
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	08 95       	ret

00000682 <timer>:

//increases digits on screens, at 999,9 state it changes periods of tasks to 1s from 100ms
void timer(void* param)
{
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	00 d0       	rcall	.+0      	; 0x688 <timer+0x6>
 688:	cd b7       	in	r28, 0x3d	; 61
 68a:	de b7       	in	r29, 0x3e	; 62
 68c:	9a 83       	std	Y+2, r25	; 0x02
 68e:	89 83       	std	Y+1, r24	; 0x01
	if(first == 9 && second == 9 && third == 9 && fourth == 9)
 690:	80 91 7e 00 	lds	r24, 0x007E
 694:	90 91 7f 00 	lds	r25, 0x007F
 698:	89 30       	cpi	r24, 0x09	; 9
 69a:	91 05       	cpc	r25, r1
 69c:	b9 f5       	brne	.+110    	; 0x70c <timer+0x8a>
 69e:	80 91 80 00 	lds	r24, 0x0080
 6a2:	90 91 81 00 	lds	r25, 0x0081
 6a6:	89 30       	cpi	r24, 0x09	; 9
 6a8:	91 05       	cpc	r25, r1
 6aa:	81 f5       	brne	.+96     	; 0x70c <timer+0x8a>
 6ac:	80 91 76 00 	lds	r24, 0x0076
 6b0:	90 91 77 00 	lds	r25, 0x0077
 6b4:	89 30       	cpi	r24, 0x09	; 9
 6b6:	91 05       	cpc	r25, r1
 6b8:	49 f5       	brne	.+82     	; 0x70c <timer+0x8a>
 6ba:	80 91 78 00 	lds	r24, 0x0078
 6be:	90 91 79 00 	lds	r25, 0x0079
 6c2:	89 30       	cpi	r24, 0x09	; 9
 6c4:	91 05       	cpc	r25, r1
 6c6:	11 f5       	brne	.+68     	; 0x70c <timer+0x8a>
	{
		tasks[1].period = 1000;
 6c8:	88 ee       	ldi	r24, 0xE8	; 232
 6ca:	93 e0       	ldi	r25, 0x03	; 3
 6cc:	90 93 8f 00 	sts	0x008F, r25
 6d0:	80 93 8e 00 	sts	0x008E, r24
		tasks[1].togo = 1000;
 6d4:	88 ee       	ldi	r24, 0xE8	; 232
 6d6:	93 e0       	ldi	r25, 0x03	; 3
 6d8:	90 93 95 00 	sts	0x0095, r25
 6dc:	80 93 94 00 	sts	0x0094, r24
		
		//initializes new state, 1000, dot is eliminated from now on
		fourth = 1;
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	90 93 79 00 	sts	0x0079, r25
 6e8:	80 93 78 00 	sts	0x0078, r24
		third = 0;
 6ec:	10 92 77 00 	sts	0x0077, r1
 6f0:	10 92 76 00 	sts	0x0076, r1
		second = 0;
 6f4:	10 92 81 00 	sts	0x0081, r1
 6f8:	10 92 80 00 	sts	0x0080, r1
		first = 0;	
 6fc:	10 92 7f 00 	sts	0x007F, r1
 700:	10 92 7e 00 	sts	0x007E, r1
		dot = 0b00000000;
 704:	10 92 7b 00 	sts	0x007B, r1
 708:	10 92 7a 00 	sts	0x007A, r1
	}
	if(first + 1 < 10)
 70c:	80 91 7e 00 	lds	r24, 0x007E
 710:	90 91 7f 00 	lds	r25, 0x007F
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	8a 30       	cpi	r24, 0x0A	; 10
 718:	91 05       	cpc	r25, r1
 71a:	54 f4       	brge	.+20     	; 0x730 <timer+0xae>
	{
		first ++;
 71c:	80 91 7e 00 	lds	r24, 0x007E
 720:	90 91 7f 00 	lds	r25, 0x007F
 724:	01 96       	adiw	r24, 0x01	; 1
 726:	90 93 7f 00 	sts	0x007F, r25
 72a:	80 93 7e 00 	sts	0x007E, r24
 72e:	46 c0       	rjmp	.+140    	; 0x7bc <timer+0x13a>
	}
	else
	{
		first = 0;
 730:	10 92 7f 00 	sts	0x007F, r1
 734:	10 92 7e 00 	sts	0x007E, r1
		if(second + 1 < 10)
 738:	80 91 80 00 	lds	r24, 0x0080
 73c:	90 91 81 00 	lds	r25, 0x0081
 740:	01 96       	adiw	r24, 0x01	; 1
 742:	8a 30       	cpi	r24, 0x0A	; 10
 744:	91 05       	cpc	r25, r1
 746:	54 f4       	brge	.+20     	; 0x75c <timer+0xda>
		{
			second ++;
 748:	80 91 80 00 	lds	r24, 0x0080
 74c:	90 91 81 00 	lds	r25, 0x0081
 750:	01 96       	adiw	r24, 0x01	; 1
 752:	90 93 81 00 	sts	0x0081, r25
 756:	80 93 80 00 	sts	0x0080, r24
 75a:	30 c0       	rjmp	.+96     	; 0x7bc <timer+0x13a>
		}
		else
		{
			second = 0;
 75c:	10 92 81 00 	sts	0x0081, r1
 760:	10 92 80 00 	sts	0x0080, r1
			if(third + 1 < 10)
 764:	80 91 76 00 	lds	r24, 0x0076
 768:	90 91 77 00 	lds	r25, 0x0077
 76c:	01 96       	adiw	r24, 0x01	; 1
 76e:	8a 30       	cpi	r24, 0x0A	; 10
 770:	91 05       	cpc	r25, r1
 772:	54 f4       	brge	.+20     	; 0x788 <timer+0x106>
			{
				third++;
 774:	80 91 76 00 	lds	r24, 0x0076
 778:	90 91 77 00 	lds	r25, 0x0077
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	90 93 77 00 	sts	0x0077, r25
 782:	80 93 76 00 	sts	0x0076, r24
 786:	1a c0       	rjmp	.+52     	; 0x7bc <timer+0x13a>
			}
			else
			{
				third = 0;
 788:	10 92 77 00 	sts	0x0077, r1
 78c:	10 92 76 00 	sts	0x0076, r1
				if(fourth + 1 < 10)
 790:	80 91 78 00 	lds	r24, 0x0078
 794:	90 91 79 00 	lds	r25, 0x0079
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	8a 30       	cpi	r24, 0x0A	; 10
 79c:	91 05       	cpc	r25, r1
 79e:	54 f4       	brge	.+20     	; 0x7b4 <timer+0x132>
				{
					fourth++;
 7a0:	80 91 78 00 	lds	r24, 0x0078
 7a4:	90 91 79 00 	lds	r25, 0x0079
 7a8:	01 96       	adiw	r24, 0x01	; 1
 7aa:	90 93 79 00 	sts	0x0079, r25
 7ae:	80 93 78 00 	sts	0x0078, r24
 7b2:	04 c0       	rjmp	.+8      	; 0x7bc <timer+0x13a>
				}
				else
				{
					fourth = 0;
 7b4:	10 92 79 00 	sts	0x0079, r1
 7b8:	10 92 78 00 	sts	0x0078, r1
				}
			}
		}
	}
}
 7bc:	0f 90       	pop	r0
 7be:	0f 90       	pop	r0
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	08 95       	ret

000007c6 <main>:


int main(void)
{
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	cd b7       	in	r28, 0x3d	; 61
 7cc:	de b7       	in	r29, 0x3e	; 62
	//add tasks for refreshing screen, 2ms delay and timer every 100ms
	AddTask(1, 3, screen, 0);
 7ce:	20 e0       	ldi	r18, 0x00	; 0
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	44 ea       	ldi	r20, 0xA4	; 164
 7d4:	52 e0       	ldi	r21, 0x02	; 2
 7d6:	63 e0       	ldi	r22, 0x03	; 3
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <AddTask>
	AddTask(2, 100, timer, 0);
 7e2:	20 e0       	ldi	r18, 0x00	; 0
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	41 e4       	ldi	r20, 0x41	; 65
 7e8:	53 e0       	ldi	r21, 0x03	; 3
 7ea:	64 e6       	ldi	r22, 0x64	; 100
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	82 e0       	ldi	r24, 0x02	; 2
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <AddTask>
	//initialize kernel and interruption
	k_init();
 7f6:	0e 94 48 02 	call	0x490	; 0x490 <k_init>
	sei();
 7fa:	78 94       	sei
	//make sure we use correct ports
	PORTD = ~1;
 7fc:	82 e3       	ldi	r24, 0x32	; 50
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	2e ef       	ldi	r18, 0xFE	; 254
 802:	fc 01       	movw	r30, r24
 804:	20 83       	st	Z, r18
	PORTA = digit[1];
 806:	8b e3       	ldi	r24, 0x3B	; 59
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	20 91 64 00 	lds	r18, 0x0064
 80e:	30 91 65 00 	lds	r19, 0x0065
 812:	fc 01       	movw	r30, r24
 814:	20 83       	st	Z, r18
	//start task checking
	execute();
 816:	0e 94 49 00 	call	0x92	; 0x92 <execute>
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	df 91       	pop	r29
 820:	cf 91       	pop	r28
 822:	08 95       	ret

00000824 <_exit>:
 824:	f8 94       	cli

00000826 <__stop_program>:
 826:	ff cf       	rjmp	.-2      	; 0x826 <__stop_program>
